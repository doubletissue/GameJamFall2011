from __future__ import division
import math, random, os
import pygame

from item import Item


corner_image          = pygame.image.load(os.path.join("Art","wallcorner.png"))
side_image            = pygame.image.load(os.path.join("Art","wallside.png"))
floor_image           = pygame.image.load(os.path.join("Art","floortile.png"))
shelf_image           = pygame.image.load(os.path.join("Art","shelf.png"))
red_floor_image       = pygame.image.load(os.path.join("Art","tile_red.png"))
green_floor_image     = pygame.image.load(os.path.join("Art","tile_green.png"))

images = {
          0.1 :                          corner_image,
          0.2 : pygame.transform.rotate( corner_image, 90 ),
          0.3 : pygame.transform.rotate( corner_image, 180 ),
          0.4 : pygame.transform.rotate( corner_image, 270 ),
          
          1.1 :                          side_image,
          1.2 : pygame.transform.rotate( side_image, 90 ),
          1.3 : pygame.transform.rotate( side_image, 180 ),
          1.4 : pygame.transform.rotate( side_image, 270 ),
          
          2.1 : green_floor_image,
          2.2 : red_floor_image,
          
          3.1 : shelf_image,
          3.2 : shelf_image,
          3.3 : shelf_image,
          3.4 : shelf_image
        }
        
shelf_maps = [
              [
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.2, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.3, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.4, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0, 3.1, 0.0, 0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,3.1 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ],
                [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ]
              ]
            ]


maps = [
        [
          [ 0.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,1.1 ,0.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 1.4, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1, 2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,2.1 ,1.2 ],
          [ 0.4, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3, 1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,1.3 ,0.3 ]
        ]
      ]
          
    

class Map:
  
  def __init__(self, level):
    #self.tiles = maps[level]
    self.shelves = shelf_maps[level]
    self.tiles = {}
    for x in range(25):
      self.tiles[x]={}
      for y in range(25):
        
        if   x is 0 and y is 0:
          self.tiles[x][y] = 0.1
        elif x is 0 and y is 24:
          self.tiles[x][y] = 0.2
        elif x is 0:
          self.tiles[x][y] = 1.1
        
        elif x is 24 and y is 0:
          self.tiles[x][y] = 0.4
        elif x is 24 and y is 24:
          self.tiles[x][y] = 0.3
        elif x is 24:
          self.tiles[x][y] = 1.3
        
        elif y is 0:
          self.tiles[x][y] = 1.4
        elif y is 24:
          self.tiles[x][y] = 1.2
        else:
          self.tiles[x][y] = random.choice( [2.1,2.2] ) 
    
    self.items = {}
    for x in range(25):
      for y in range(25):
        if   self.shelves[x][y] == 3.2:
          self.items[ (x,y) ] = Item(0)
        elif self.shelves[x][y] == 3.3:
          self.items[ (x,y) ] = Item(1)
        elif self.shelves[x][y] == 3.4:
          self.items[ (x,y) ] = Item(2)
    
        
        
  
  def getShelfImage(self,x,y):
    if self.shelves[x][y] != 0.0:
      return images[self.shelves[x][y]]
    return None
    
  def getTileImage(self,x,y):
    return images[self.tiles[x][y]]
    
  def getDrawPos(self,x,y):
    return (x*40,y*40)
    
  def draw(self,screen):
    for x in range(25):
      for y in range(25):
        screen.blit(self.getTileImage(x,y),self.getDrawPos(x,y))
        shelf_image = self.getShelfImage(x,y)
        if shelf_image:
          screen.blit(shelf_image,self.getDrawPos(x,y))
        if (x,y) in self.items:
          self.items[ (x,y) ].draw(screen, (x*40,y*40) )
          
  